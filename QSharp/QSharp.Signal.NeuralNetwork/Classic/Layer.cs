using System;
using System.Collections.Generic;

namespace QSharp.Signal.NeuralNetwork.Classic
{
    /// <summary>
    ///  A layer of classic neural network 
    /// </summary>
    public class Layer : IDisposable
    {
        #region Constructors

        /// <summary>
        ///  Instantiates and constructs a layer
        /// </summary>
        /// <param name="perceptron">The perceptron shared by all nodes in this layer</param>
        /// <param name="numPerceptrons"></param>
        /// <param name="numInputs"></param>
        public Layer(Perceptron perceptron, int numPerceptrons, int numInputs)
        {
            Weights = new double[numPerceptrons, numInputs];
            WeightedSums = new double[numPerceptrons];
            Outputs = new double[numPerceptrons];
            Perceptron = perceptron;
        }

        #endregion

        #region Properties

        /// <summary>
        ///  The number of perceptrons in this layer
        /// </summary>
        public int NumPerceptrons
        {
            get { return Weights.GetLength(0); }
        }

        public int NumInputs
        {
            get { return Weights.GetLength(1); }
        }

        /// <summary>
        ///  The weights applied to inputs to this layer
        /// </summary>
        public double[,] Weights { get; private set; }

        /// <summary>
        ///  The bias
        /// </summary>
        public double Bias { get; set; }

        /// <summary>
        ///  The weighted sums (a) generated by method CalculateWeightedSums()
        /// </summary>
        public double[] WeightedSums { get; private set; }

        /// <summary>
        ///  The outputs (z) generated by method CalculateWeightedSums()
        /// </summary>
        public double[] Outputs { get; private set; }

        /// <summary>
        ///  The perceptron shared by all nodes in this layer
        /// </summary>
        public Perceptron Perceptron { get; private set; }

        #endregion

        #region Methods

        #region IDisposable members

        /// <summary>
        ///  Dispose of this layer
        /// </summary>
        public void Dispose()
        {
            Weights = null;
            WeightedSums = null;
            Outputs = null;
            Perceptron = null;
        }

        #endregion

        /// <summary>
        ///  Calcualtes weighte sums (a values) based on input
        /// </summary>
        /// <param name="input">The input values to this layer</param>
        public void Calculate(IList<double> input)
        {
            for (var i = 0; i < NumPerceptrons; i++)
            {
                var a = Bias;
                for (var j = 0; j < input.Count; j++)
                {
                    var z = input[j];
                    var w = Weights[i, j];
                    a += z * w;
                }
                WeightedSums[i] = a;
                Outputs[i] = Perceptron.Activation(a);
            }
        }

        #endregion
    }
}
